module webgpu;

distinct Instance = inline void*;

fn Surface Instance.createSurface(Instance instance,
    SurfaceDescriptor* descriptor) @extern("wgpuInstanceCreateSurface");

fn Instance createInstance(InstanceDescriptor* descriptor = null) @extern("wgpuCreateInstance");

fn void Instance.hasWGSLLanguageFeature(Instance instance, WgslFeatureName feature) @extern("wgpuInstanceHasWGSLLanguageFeature");

fn void Instance.processEvents(Instance instance) @extern("wgpuInstanceProcessEvents");

fn void Instance.requestAdapterAsync(Instance instance, RequestAdapterOptions* options,
    RequestAdapterCallback callback, UserData data) @extern("wgpuInstanceRequestAdapter");

fn void Instance.reference(Instance instance) @extern("wgpuInstanceReference");

fn void Instance.release(Instance instance) @extern("wgpuInstanceRelease");


def RequestAdapterCallback = fn void(RequestAdapterStatus status,
    Adapter adapter, ZString message, UserData result);


struct InstanceDescriptor {
    ChainedStruct* next;
}


enum RequestAdapterStatus {
    SUCCESS,
    UNAVAILABLE,
    ERROR,
    UNKNOWN
}