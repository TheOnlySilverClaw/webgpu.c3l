module webgpu;

distinct ShaderModule = inline void*;

fn void ShaderModule.setLabel(ShaderModule shaderModule,
    ZString label) @extern("wgpuShaderModuleSetLabel");

fn void ShaderModule.reference(ShaderModule shaderModule) @extern("wgpuShaderModuleReference");

fn void ShaderModule.release(ShaderModule shaderModule) @extern("wgpuShaderModuleRelease");


def CompilationInfoCallback = fn void(CompilationInfoRequestStatus status,
    CompilationInfo* info, UserData data);

def ShaderStageFlags = CUInt;
def ColorWriteMaskFlags = CUInt;

struct CompilationMessage {
    ChainedStruct* next;
    ZString message;
    CompilationMessageType type;
    CULong lineNumber;
    CULong linePosition;
    CULong offset;
    CULong length;
    CULong utf16LinePosition;
    CULong utf16Offset;
    CULong utf16Length;
}

struct CompilationInfo {
    ChainedStruct* next;
    usz messageCount;
    CompilationMessage* messages;
}

struct ConstantEntry {
    ChainedStruct* next;
    ZString key;
    double value;
}

struct MultisampleState {
    ChainedStruct* next;
    CUInt count;
    CUInt mask;
    Bool alphaToCoverageEnabled;
}

struct Origin3D {
    CUInt x;
    CUInt y;
    CUInt z;
}

struct ShaderModuleCompilationHint {
    ChainedStruct* next;
    ZString entryPoint;
    PipelineLayout layout;
}

struct ShaderModuleDescriptor {
    ChainedStruct* next;
    ZString label;
    usz hintCount;
    ShaderModuleCompilationHint* hints;
}

struct ShaderModuleSPIRVDescriptor {
    ChainedStruct chain;
    CUInt codeSize;
    CUInt* code;
}

struct ShaderModuleWGSLDescriptor {
    ChainedStruct chain;
    ZString code;
}

struct StencilFaceState {
    CompareFunction compare;
    StencilOperation failOperation;
    StencilOperation depthFailOperation;
    StencilOperation passOperation;
}

struct VertexAttribute {
    VertexFormat format;
    CULong offset;
    CUInt shaderLocation;
}

struct BlendState {
    BlendComponent color;
    BlendComponent alpha;
}

struct DepthStencilState {
    ChainedStruct* next;
    TextureFormat format;
    Bool depthWriteEnabled;
    CompareFunction depthCompare;
    StencilFaceState stencilFront;
    StencilFaceState stencilBack;
    CUInt stencilReadMask;
    CUInt stencilWriteMask;
    CInt depthBias;
    float depthBiasSlopeScale;
    float depthBiasClamp;
}

struct ColorTargetState {
    ChainedStruct* next;
    TextureFormat format;
    BlendState* blend;
    ColorWriteMaskFlags writeMask;
}